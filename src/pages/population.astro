---
import PlotFigure from "../components/PlotFigure.astro";
import Layout from "../layouts/Layout.astro";
import * as Plot from "@observablehq/plot";
import departements from "../assets/departements.geojson.json";
import populationMain from "../assets/populationMain.json";

const listePeriode = [
  ...new Set(populationMain?.map((d) => d.P√©riode)),
].reverse();

const listeSexe = [
  ...new Set(populationMain?.map((d) => d.Sexe)),
];

const listeAge = [
  ...new Set(populationMain?.map((d) => d["√Çge"])),
];

let selectedYear = listePeriode[0];
let selectedSex = listeSexe[0];
let selectedAge = listeAge[0];

const optionPlot = {
  projection: {
    type: "mercator",
    domain: departements,
  },
  color: {
    type: "quantile",
    n: 8,
    scheme: "Greens",
    label: "Population en centaine de milliers",
    legend: true,
    transform: (d) => Math.round(d / 100000),
  },
  marks: [
    Plot.geo(departements, {
      fill: (d) => {
        const deptName = d.properties.nom;
        const popData = populationMain.find(
          (p) =>
            p.G√©ographie === deptName &&
            p.P√©riode === selectedYear &&
            p.Sexe === selectedSex &&
            p["√Çge"] === selectedAge
        );
        return popData ? popData.Valeur : 0;
      },
      stroke: "#999",
      title: (d) => {
        const deptName = d.properties.nom;
        const popData = populationMain.find(
          (p) =>
            p.G√©ographie === deptName &&
            p.P√©riode === selectedYear &&
            p.Sexe === selectedSex &&
            p["√Çge"] === selectedAge
        );
        return popData ? `${deptName} : ${popData.Valeur}` : deptName;
      },
      tip: true,
    }),
  ],
};
---

<Layout title="Population France - DataViz Studio">
  <div class="max-w-7xl mx-auto">
    <!-- Page Header -->
    <div class="mb-8">
      <h1 class="text-4xl font-bold text-gray-800 mb-3">üó∫Ô∏è Population par D√©partement</h1>
      <p class="text-lg text-gray-600">
        Carte interactive de la population fran√ßaise avec filtres dynamiques
      </p>
    </div>

    <!-- Filters Card -->
    <div class="bg-white rounded-xl shadow-lg p-6 mb-8">
      <h2 class="text-xl font-semibold text-gray-800 mb-4">Filtres de donn√©es</h2>
      <div class="grid md:grid-cols-3 gap-4">
        <div>
          <label for="periode" class="block text-sm font-medium text-gray-700 mb-2">
            üìÖ Ann√©e
          </label>
          <select 
            id="periode" 
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            {listePeriode.map((p, i) => <option selected={i === 0}>{p}</option>)}
          </select>
        </div>
        
        <div>
          <label for="sexe" class="block text-sm font-medium text-gray-700 mb-2">
            üë§ Sexe
          </label>
          <select 
            id="sexe" 
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            {listeSexe.map((p, i) => <option selected={i === 0}>{p}</option>)}
          </select>
        </div>
        
        <div>
          <label for="age" class="block text-sm font-medium text-gray-700 mb-2">
            üéÇ √Çge
          </label>
          <select 
            id="age" 
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            {listeAge.map((p, i) => <option selected={i === 0}>{p}</option>)}
          </select>
        </div>
      </div>
    </div>

    <!-- Map Card -->
    <div class="bg-white rounded-xl shadow-lg p-8">
      <h2 class="text-2xl font-semibold text-gray-800 mb-6">Carte de la France</h2>
      
      <div id="plot-container" class="rounded-lg overflow-hidden">
        <PlotFigure options={optionPlot} />
      </div>
    </div>

    <!-- Info -->
    <div class="mt-6 bg-blue-50 rounded-lg p-6">
      <p class="text-blue-900 text-sm">
        üí° <strong>Astuce :</strong> S√©lectionnez diff√©rentes p√©riodes, sexes et tranches d'√¢ge pour voir l'√©volution de la population par d√©partement.
      </p>
    </div>
  </div>

  <script>
  import * as Plot from "@observablehq/plot";
  import departements from "../assets/departements.geojson.json";
  import populationMain from "../assets/populationMain.json";

  const elmYear = document.getElementById("periode") as HTMLSelectElement;
  let selectedYear = Number(elmYear.value);

  const elmSex = document.getElementById("sexe") as HTMLSelectElement;
  let selectedSex = elmSex.value;

  const elmAge = document.getElementById("age") as HTMLSelectElement;
  let selectedAge = elmAge.value;

  function renderPlot() {
    selectedYear = Number(elmYear.value);
    selectedSex = elmSex.value;
    selectedAge = elmAge.value;

    const container = document.getElementById("plot-container");
    container.innerHTML = "";

    const plot = Plot.plot({
      projection: {
        type: "mercator",
        domain: departements,
      },
      color: {
        type: "quantile",
        n: 8,
        scheme: "Greens",
        label: "Population en centaine de milliers",
        legend: true,
        transform: (d) => Math.round(d / 100000),
      },
      marks: [
        Plot.geo(departements, {
          fill: (d) => {
            const deptName = d.properties.nom;
            const popData = populationMain.find(
              (p) =>
                p.G√©ographie === deptName &&
                p.P√©riode === selectedYear &&
                p.Sexe === selectedSex &&
                p["√Çge"] === selectedAge
            );
            return popData ? popData.Valeur : 0;
          },
          stroke: "#999",
          title: (d) => {
            const deptName = d.properties.nom;
            const popData = populationMain.find(
              (p) =>
                p.G√©ographie === deptName &&
                p.P√©riode === selectedYear &&
                p.Sexe === selectedSex &&
                p["√Çge"] === selectedAge
            );
            return popData ? `${deptName} : ${popData.Valeur}` : deptName;
          },
          tip: true,
        }),
      ],
    });

    container.appendChild(plot);
  }

  renderPlot();

  elmYear.addEventListener("change", renderPlot);
  elmSex.addEventListener("change", renderPlot);
  elmAge.addEventListener("change", renderPlot);
  </script>
</Layout>
