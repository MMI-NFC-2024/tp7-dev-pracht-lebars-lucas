---
import PlotFigure from "../components/PlotFigure.astro";
import Layout from "../layouts/Layout.astro";
import * as Plot from "@observablehq/plot";
import penguins from "../assets/penguins.json";
// Import des styles CSS de Leaflet pour l'affichage de la carte
import "leaflet/dist/leaflet.css";

import * as Plot from "@observablehq/plot";
import PlotFigure from "../components/PlotFigure.astro";
import departements from "../assets/departements.geojson.json";
import populationMain from "../assets/populationMain.json";
let selectedYear = 2015;
let selectedSex = "Total";
let selectedAge = "Total";
const optionPlot = {
  projection: {
    type: "mercator", //utiliser une projection adaptée
    domain: departements, // Domain pour centrer la carte sur la france
  },
  color: {
    type: "quantile",
    n: 8,
    scheme: "Greens",
    label: "Population en centaine de milliers",
    legend: true,
    transform: (d) => Math.round(d / 100000),
  },
  marks: [
    Plot.geo(departements, {
      fill: (d) => {
        const deptName = d.properties.nom; //Nom du département dans le geoJson
        const popData = populationMain.find(
          (p) =>
            p.Géographie === deptName &&
            p.Période === selectedYear &&
            p.Sexe === selectedSex &&
            p["Âge"] === selectedAge
        ); //trouver les données correspondantes
        return popData.Valeur; //Coloriser en fonction de la valeur
      },
      stroke: "#999",
      title: (d) => {
        const deptName = d.properties.nom; //Nom du département dans le geoJson
        const popData = populationMain.find(
          (p) =>
            p.Géographie === deptName &&
            p.Période === selectedYear &&
            p.Sexe === selectedSex &&
            p["Âge"] === selectedAge
        ); //trouver les données correspondantes
        return `${deptName} : ${popData.Valeur}`; //Coloriser en fonction de la valeur
      },
      tip: true,
    }),
  ],
};
---

<Layout>
  <h1 class="text-2xl">Test Astro et Plot (Observablehq)</h1>
  
  <PlotFigure
    options={{
      // Opt. Construit une figure/figcation.
      title: "For charts, an informative title",
      subtitle: "Subtitle to follow with additional context",
      caption: "Figure 1. A chart with a title, subtitle, and caption.",
      // Sur le svg lui-même
      ariaLabel: "label sur le svg lui même",
      marks: [
        Plot.frame(),
        Plot.text(["Titles, subtitles, captions, and annotations assist inter­pretation by telling the reader what's interesting. Don't make the reader work to find what you already know."], {lineWidth: 30, frameAnchor: "middle"}),
        Plot.dot(penguins, {
          x: "culmen_length_mm",
          y: "culmen_depth_mm",
          stroke: "species",
        }),
      ],
    }}
  />
  




  <div id="map" style="height: 600px;"></div>
<script>
import listeEtablissements from "../assets/listeEtablissements.json";

// Import de la bibliothèque Leaflet pour créer la carte interactive
import L from "leaflet";
// Dans l'élément d'ID "map" : création de la carte centrée sur la France (lat: 46.6033, lon: 1.883) avec un zoom niveau 6
const map = L.map("map").setView([46.6033, 1.883], 6);

 L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
  }).addTo(map);

// Ajouter les points des établissements sur la carte
listeEtablissements.forEach(est => {
  const marker = L.marker([est.lat, est.lon]).addTo(map);
  marker.bindPopup(`<b>${est.name}</b>`); // Ajout d'une popup avec le nom de l'établissement
});

// ... https://leafletjs.com/examples/quick-start/
// ...
</script>





<PlotFigure options={optionPlot} />

</Layout>
